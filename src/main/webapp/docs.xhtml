
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">

    <ui:define name="title">Documentation</ui:define>
    
    <ui:define name="head">
        <style type="text/css">
            .docs h1 {
                margin-top: 30px;
                margin-bottom: 10px;
            }
            
            .docs p,
            .docs li {
                line-height: 1.5;
            }
            
            .docs pre {
                font-family: monospace;
                background-color: #efeff1;
                color: #333333;
                padding: 1em;
                font-size: 14px;
                border-radius: 3px;
                overflow: auto;
            }
            
            .video-container {
                position: relative;
                width: 100%;
                height: 0;
                padding-bottom: 56.25%;
            }
            .video-container iframe {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
            }
        </style>
    </ui:define>

    <ui:define name="content">
    
        <div class="ui-g">
            <div class="ui-g-12">
                <div class="card docs">
                    <h1>Getting Started</h1>
                    <p>First of all, you'd need SASS to compile CSS, proceed to <a href="https://sass-lang.com/install">SASS Installation</a> before beginning if you do not have SASS available in your command line.</p>
                    <p>Demo project has an integrated jetty plugin so running the sample is easy as building the css first followed by the mvn jetty:run command.</p>
<pre>
sass --update src/main/webapp/resources/ --sourcemap=none
mvn jetty:run
</pre> 
                    <p>Navigate to http://localhost:8080/manhattan to view the demos which is exactly same as the live version.</p>                 
                    
                    <h1>Layout</h1>
                    <p>Manhattan utilizes <a href="http://docs.oracle.com/javaee/6/tutorial/doc/giqxp.html">JSF templating APIs</a> and provides a main template.xhtml along with additional <i>topbar</i>, <i>sidebar</i>, <i>rightpanel</i>, <i>footer</i> fragments for the base layout. 
                        These xhtml files must be placed under WEB-INF folder and client pages should reference the template.xhtml as their template. 
                        Provided empty.xhtml is a sample content page using the main template.xhtml that defines "content" as the main ui:define placeholder. By default template defines 3 placeholders 
                        (page title, header content and actual content)to insert content and you can add more as per your requirements.</p>
                        
                    <p>Sample page below uses the main template from Manhattan.</p>
<pre>
&lt;ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml"&gt;
                
    &lt;ui:define name="title"&gt;Test Page&lt;/ui:define&gt;

    &lt;ui:define name="content"&gt;
        Content goes here
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;
</pre>
                    
                    <p>Other required resources are the css, js and images that are located inside resources/manhattan-layout folder, simply copy the manhattan-layout folder to your %WEB-APP-FOLDER%/resources folder 
                        so that final path would be %WEB-APP-FOLDER%/resources/manhattan-layout/. Please refer to demo app or maven project of the demo app as the reference.</p>
                    
                    <h1>GuestPreferences Bean</h1>
                    <p>GuestPreferences is a simple session scoped bean to keep the user customizations of the layout, template xhtml files and theme configuration
                    refer to this bean to dynamically change their behavior such as menu mode or theme. This bean is not necessary to run the Manhattan
                    and only used for demo purposes. For example template.xhtml includes layout color depending on a user preference using an EL expression.</p>
<pre>
&lt;h:outputStylesheet name="css/layout-\#{guestPreferences.theme}.css" library="manhattan-layout" /&gt;   
</pre>               
                    <p>In your application, you may also need a similar bean to make the template dynamic or choose a static color with;</p>  
                    
<pre>
&lt;h:outputStylesheet name="css/layout-teal-yellow.css" library="manhattan-layout" /&gt;   
</pre>   

                    <p>Similarly PrimeFaces theme can be changed dynamically.</p>
<pre>
&lt;context-param&gt;
    &lt;param-name&gt;primefaces.THEME&lt;/param-name&gt;
    &lt;param-value&gt;manhattan-\#{guestPreferences.theme}&lt;/param-value&gt;
&lt;/context-param&gt;
</pre>

                    <p>Source code of GuestPreferences.</p>
<pre>
public class GuestPreferences implements Serializable {

    public enum LayoutMode {
        SLIM,
        STATIC,
        OVERLAY,
        HORIZONTAL,
        TOGGLE
    };
        
    private String theme = "teal-yellow";

    private LayoutMode layoutMode = LayoutMode.SLIM;

    private boolean lightMenu = true;
                            
    public String getTheme() {		
        return theme;
    }
    
    public void setTheme(String theme) {
        this.theme = theme;
    }
    
    public LayoutMode getLayoutMode() {		
        return layoutMode;
    }
    
    public void setLayoutMode(LayoutMode layoutMode) {
        this.layoutMode = layoutMode;
    }

    public void updateLayoutMode(String mode) {
        this.layoutMode = LayoutMode.valueOf(mode);
    }

    public boolean isLightMenu() {
        return this.lightMenu;
    }

    public void setLightMenu(boolean value) {
        this.lightMenu = value;
    }
    
    public String getLayoutStyleClass() {
        String layoutStyleClass;
        switch(this.layoutMode) {
            case SLIM:
                layoutStyleClass = "layout-slim";
            break;

            case STATIC:
                layoutStyleClass = "layout-static";
            break;

            case OVERLAY:
                layoutStyleClass = "layout-overlay";
            break;

            case HORIZONTAL:
                layoutStyleClass = "layout-horizontal";
            break;

            case TOGGLE:
                layoutStyleClass = "layout-toggle";
            break;

            default:
                layoutStyleClass = "layout-slim";
            break;
        }

        if(this.lightMenu) {
            layoutStyleClass += " layout-light";
        }

        return layoutStyleClass;
    }
}
</pre>
                    
                    <h1>Theme</h1>
                    <p>Manhattan provides 15 PrimeFaces themes out of the box, setup of a theme simple as including the theme jar in your classpath and defining primefaces.THEME context parameter in web.xml such as "manhattan-green". Full list of 
                    available themes are;</p>
                    
                    <ul>
                        <li>primefaces-manhattan-blue-grey</li>
                        <li>primefaces-manhattan-blue-orange</li>
                        <li>primefaces-manhattan-cyan-deeporange</li>
                        <li>primefaces-manhattan-darkpink-cyan</li>
                        <li>primefaces-manhattan-deeppurple-teal</li>
                        <li>primefaces-manhattan-green-orange</li>
                        <li>primefaces-manhattan-green-pink</li>
                        <li>primefaces-manhattan-green-purple</li>
                        <li>primefaces-manhattan-indigo-purple</li>
                        <li>primefaces-manhattan-indigo-yellow</li>
                        <li>primefaces-manhattan-orange-cyan</li>
                        <li>primefaces-manhattan-orange-indigo</li>
                        <li>primefaces-manhattan-pink-cyan</li>
                        <li>primefaces-manhattan-pink-teal</li>
                        <li>primefaces-manhattan-teal-yellow</li>
                    </ul>
                    
                    <p>A custom theme can be developed by the following steps.</p>
                    <ul>
                        <li>Create a custom theme folder such as primefaces-manhattan-myown under webapp/resources and place an empty theme.scss inside.</li>
                        <li>Copy the sass folder from the distribution to webapp/resources.</li>
                        <li>Define the variables listed below and import the <i>/sass/theme/_theme.scss</i> file.</li>
                        <li>Build the scss to generate css.</li>
                        <li>Set primefaces.THEME context parameter as <i>manhattan-myown</i></li>
                        <li>Either bundle the css in a jar file or serve from webapp/resources/primefaces-manhattan-myown folder</li>
                    </ul>
                    
                    <p>Here are the variables required to create a theme.</p>
                        
<pre>
$primaryColor:#147df0;
$primaryTextColor:#ffffff;
$primaryDarkColor:#1165c2;
$inputFocusBorderColor:#77aeeb;
$highlightBgColor:#ffaa00;
$highlightTextColor:#ffffff;
$datableEvenRowBgColor:#fdfafc;
$datatableHoverBgColor:#e3e1e2;

@import '../sass/theme/_theme';
</pre> 
                        
                    <p> An example sass command to compile the css would be;</p>
                        
<pre>
sass src/main/webapp/resources/primefaces-manhattan-myown/theme.scss src/main/webapp/resources/primefaces-manhattan-myown/theme.css  --sourcemap=none
</pre> 

                    <p>Watch mode is handy to avoid compiling everytime when a change is made, instead use the following command
                    so that sass generates the file whenever you make a customization. This builds all css files whenever a change is made to any scss file.</p>
<pre>
sass -w src/main/webapp/resources/ --sourcemap=none
</pre> 

                    <h1>Layout</h1>
                    <p>Layout customization is similar to theme method.</p>
                    <ul>
                        <li>Choose a layout name such as layout-myown.</li>
                        <li>Create an empty file named layout-myown.scss inside resources/manhattan-layout/css folder.</li>
                        <li>Copy the sass folder from the distribution to webapp/resources.</li>
                        <li>Define the variables listed below and import the <i>/sass/layout/_layout.scss</i> file.</li>
                        <li>Build the scss to generate css</li>
                        <li>Serve the css by importing it using a link tag or h:outputStylesheet.</li>
                    </ul>

                    <p>Here are the variables required to create a layout.</p>
                        
<pre>
$sidebarTopStartBgColor:#3d72b4;
$sidebarTopEndBgColor:#525252;
$sidebarAnchorColor:#ffffff;
$menuitemActiveColor:#3D72B4;
$rootMenuitemActiveIconColor:#ffffff;
$menuitemBadgeBgColor:#7f7f7f;
$menuitemBadgeTextColor:#ffffff;
$horizontalLayoutTopbarTextColor:#ffffff;
$horizontalLayoutTopbarTextHoverColor:#BDD0E7;

@import '../../sass/layout/_layout';
</pre> 

                    <h1>SASS Variables</h1>
                    <p>In case you'd like to customize common variables, the _common.scss under sass variables folder is where the core variables (e.g. font size, paddings) for the layout are defined.</p>
<pre>
$fontFamily:"Source Sans Pro","Helvetica Neue",sans-serif;
$fontSize:14px;
$textColor:#434560;
$textSecondaryColor:lighten($textColor,25%);
$borderRadius:2px;
$dividerColor:#d8dae2;
$transitionDuration:.3s;

$blue:#147df0;
$pink:#ed3c76;
$green:#3e9018;
$red:#da2f31;
$orange:#ffb200;
$teal:#599597;
$purple:#633ea5;
$black:#000000;
$yellow:#ffd644;
</pre> 

                    <p>_layout.scss under variables define the shared variables of the layout.</p>
<pre>
@import './common';

$bodyBgColor:#f4f3f8;

//topbar
$topbarBgColor:#ffffff;
$topbarIconColor:#b6b7c2;
$topbarIconHoverColor:#7f8087;
$topbarIconActiveColor:#48494d;
$topbarInputBorderColor:#d8dae2;
$topbarSubmenuHoverBgColor:#f1f2f7;
$topbarMobileMenuBgColor:#ffffff;

//dark sidebar - default
$sidebarBgColor:#2c2d3c;
$menuitemIconBgColor:#1d1d26;
$menuitemTextColor:#d9dae3;
$menuitemHoverBgColor:#1d1d26;
$submenuitemHoverBgColor:#242430;
$activeMenuitemBgColor:#17171e;
$submenuBgColor:#17171e;

//light sidebar
$lightSidebarBgColor:#f2f2f7;
$lightSidebarMenuitemIconBgColor:#d9d9de;
$lightSidebarMenuitemTextColor:#575867;
$lightSidebarMenuitemHoverBgColor:#d9d9de;
$lightSidebarSubmenuitemHoverBgColor:#d9d9de;
$lightSidebarActiveMenuitemBgColor:#ffffff;
$lightSidebarSubmenuBgColor:#ffffff;

//misc
$rightPanelBgColor:#ffffff;
$mobileBreakpoint:1280px;
$contentMobileMaskBgColor:#ffffff;
</pre>

                    <p>Similarly _theme.scss files contains the shared variables of the PrimeFaces theme.</p>
<pre>
@import './common';

/* Icons */
$iconFontSize:13px;
$iconWidth:16px;

/* Error */
$errorColor:#f28a8b;

/* Headers */
$headerPadding:6px 12px;
$headerHoverBgColor:#f1f2f7;

/* Contents */
$contentPadding:6px 12px;
$contentBorderColor:#b6b7c2;
$contentBgColor:#ffffff;

/* Forms */
$inputBgColor:#ffffff;
$inputPadding:6px;
$inputBorderColor:#b6b7c2;
$inputHoverBorderColor:#7f8087;

//groups
$inputGroupBorderColor:#b6b7c2;
$inputGroupBgColor:#ffffff;
$inputGroupTextColor:$textColor;
$inputGroupIconColor:$textSecondaryColor;
$inputGroupAddonMinWidth:2*$fontSize;
$checkboxWidth:20px;
$checkboxHeight:20px;

/* Buttons */
$buttonTextColor:#ffffff;
$toggleButtonBgColor:#b6b7c2;

/* List Items */
$listItemPadding:6px 12px;
$listItemHoverBgColor:#f1f2f7;
$listItemHoverTextColor:#434560;

/* Messages */
$infoMessageBgColor:#a8cef8;
$infoMessageTextColor:#434560;
$warnMessageBgColor:#f7e9b9;
$warnMessageTextColor:#434560;
$errorMessageBgColor:#f9bbbc;
$errorMessageTextColor:#434560;
$fatalMessageBgColor:#b6b7c2;
$fatalMessageTextColor:#434560;

/* Data */
$datatableCellBorderColor:#dbe1e6;

/* TabView */
$tabHeaderPadding:8px 12px;

/* Panel */
$panelContentBorderColor:#DCE1E7;
</pre>

                    <h1>Menu</h1>    
                    <p>Menu is a regular JSF component that supports PrimeFaces MenuModel API allowing both declarative and programmatic approaches.</p>
<pre>
xmlns:pv="http://primefaces.org/manhattan"

&lt;pm:menu&gt;
&lt;/pm:menu&gt;
</pre>  
                    <p>Menu has 5 modes with 2 color alternatices. Layout wrapper element in template.xhtml is used to define which mode to use by adding specific classes.</p>
                    <ul>
                        <li>"layout-slim": Slim menu</li>
                        <li>"layout-static": Static menu</li>
                        <li>"layout-overlay": Overlay menu</li>
                        <li>"layout-horizontal": Horizontal menu</li>
                        <li>"layout-toggle": Toggle menu</li>
                    </ul>
<pre>
&lt;div class="layout-wrapper layout-horizontal"&gt;
...
&lt;/div&gt;
</pre>
                    <p>Default color scheme of the menu is dark and adding "layout-light" style class to the .layout-wrapper enables light mode.</p>
<pre>
&lt;div class="layout-wrapper layout-overlay layout-light"&gt;
...
&lt;/div&gt;
</pre>

                    <p>Layout mode can be dynamic using an EL expression as well, refer to GuestPreferences.java for an example.</p>
<pre>
&lt;div class="layout-wrapper #{guestPreferences.layoutStyleClass}"&gt;
...
&lt;/div&gt;
</pre>

                    <h1>Icons</h1>
                    <p>Manhattan Layout uses font awesome icons for layout so enable font awesome support in PrimeFaces by setting primefaces.FONT_AWESOME context parameter in web.xml as true. If your PrimeFaces version 
                    does not have the font awesome integration, include the font-awesome manually in your application.</p>

                    <h1>Card</h1>
                    <p>Card is a section to group content and layout provides a built-in css for it. Apply .card style class to your container to use it. If the
                    card has a title defined with h1 tag, add card-w-title to adjust paddings.</p>
<pre>
&lt;div class="card"&gt;
    Content here
&lt;/div&gt;

&lt;div class="card card-w-title"&gt;
    &lt;h1&gt;Card with Title&lt;h1&gt;
    Content here
&lt;/div&gt;
</pre>  

                    <h1>Grid CSS</h1>
                    <p>Manhattan uses new PrimeFaces Grid CSS (ui-g-*) throughout the samples, we strongly suggest using Grid CSS as your layout framework as it is well tested and supported by PrimeFaces. Grid CSS 
                    is automatically included on newer versions however if your PrimeFaces version is older than 5.3.14, add the provided grid.css file under /manhattan-layout/css/ folder to your template manually.</p> 
                    
                    <h1>Tips</h1>
                    <ul>
                        <li>Familiarity with <a href="http://sass-lang.com/">SASS</a> is required to make customizations to the layout and theme.</li>
                        <li>Demo application war and the maven project tag are included in distribution however you don't necessarily need them to install Manhattan, the actual artifacts required are the layout zip file and the theme jar.</li>
                        <li>Sample demo application war includes the JSF libraries so it is suggested to remove them from the war file when you deploy to an appserver.</li>
                        <li>When running the maven project, you need to build the sass with (sass --update src/main/webapp/resources/ --sourcemap=none) command.</li>
                    </ul>
                    
                    <h1>Migration Guide</h1>
                    <p>2.0.1 to 2.0.2</p>
                    <ul>
                        <li>Update layout.js and layout css files</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>
                    
                    <p>1.0.2 to 2.0.0</p>
                    <ul>
                        <li>Update layout.js and layout css files</li>
                        <li>Update all xhtml files under WEB-INF for the new template.</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>

                    <p>1.0.2 to 1.0.3</p>
                    <ul>
                        <li>Update layout.js and layout css files</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>
                    <p>1.0 to 1.0.1</p>
                    <ul>
                        <li>Update _exception.scss files</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>
                </div>
            </div>
        </div>
        
    </ui:define>

</ui:composition>